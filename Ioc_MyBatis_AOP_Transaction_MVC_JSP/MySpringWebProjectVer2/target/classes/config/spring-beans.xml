<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Transaction Manager 설정 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Transaction Advice 설정 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />

			<!--No existing transaction found for transaction marked with propagation 
				'mandatory' -->
			<!-- <tx:method name="deleteUser" propagation="NOT_SUPPORTED"/> -->
			<!-- <tx:method name="delete" propagation="MANDATORY"/> -->

			<!-- 예외=Existing transaction found for transaction marked with propagation 
				'never' -->
			<tx:method name="updateUser" propagation="NOT_SUPPORTED" /> <!-- None -->
			<tx:method name="update" propagation="REQUIRED" />
			<!-- <tx:method name="update" propagation="MANDATORY" /> -->
		</tx:attributes>
	</tx:advice>

	<!-- Transaction AOP 설정 -->
	<aop:config>
		<aop:pointcut
			expression="execution(public * myspring.user..*(..))" id="txPointCut" />
		<!-- Advisor = Advice + Pointcut -->
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="txPointCut" />
	</aop:config>


	<!-- AOP 설정 -->
	<!-- @Aspect 설정 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<aop:config>
		<!-- <aop:aspect id="traceAspect" ref="performanceTraceAdvice"> -->
		<aop:aspect ref="performanceTraceAdvice">
			<aop:around
				pointcut="execution(public * myspring.user..*())" method="trace" />
		</aop:aspect>
	</aop:config>

	<!-- Advice 클래스를 Bean으로 등록 -->
	<bean id="performanceTraceAdvice"
		class="myspring.aop.xml.PerformanceTraceAdvice" />


	<!-- MyBatis-Spring SqlSessionFactoryBean 클래스를 Bean 등록 -->
	<!-- SqlSessionFactoryBean 설정 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:config/SqlMapConfig.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:config/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- SqlSessionTemplate 설정 -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- MapperScannerConfigurer 설정 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="myspring.user.dao.mapper" />
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>


	<!-- Commons DBCP BasicDataSource 클래스를 Bean 등록 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		p:driverClassName="${db.driverClass}" p:url="${db.url}"
		p:username="${db.username}" p:password="${db.password}"
		p:maxTotal="${db.maxTotal}" p:maxIdle="${db.maxIdle}" />

	<!-- properties file 정보 설정 -->
	<context:property-placeholder
		location="classpath:config/values.properties" />

	<!-- 전략2: Auto Component Scanning 설정 -->
	<context:component-scan
		base-package="myspring.di.annotation" />
	<context:component-scan
		base-package="myspring.user" />
	<!-- AOP @Aspect를 위한 설정 -->
	<context:component-scan
		base-package="myspring.aop.annot" />

	<!-- 전략1:Hello 클래스를 Bean으로 등록 : constructor injection -->
	<bean id="helloC" class="myspring.di.xml.Hello">
		<!-- constructor injection -->
		<constructor-arg name="name" value="생성자" />
		<constructor-arg name="printer" ref="conPrinter" />
		<property name="names">
			<list>
				<value>자바</value>
				<value>코틀린</value>
				<value>파이썬</value>
			</list>
		</property>
	</bean>

	<!-- 전략1:Hello 클래스를 Bean으로 등록 : setter injection -->
	<bean id="hello" class="myspring.di.xml.Hello" scope="singleton">
		<!-- setter injection -->
		<property name="name" value="스프링" />
		<property name="printer" ref="strPrinter" />
	</bean>

	<!-- 전략1:StringPrinter 클래스를 Bean으로 등록 -->
	<bean id="strPrinter" class="myspring.di.xml.StringPrinter" />

	<!-- 전략1:ConsolePrinter 클래스를 Bean으로 등록 -->
	<bean id="conPrinter" class="myspring.di.xml.ConsolePrinter" />

</beans>
